from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import date
from sqlalchemy import text
from db import get_db, get_paginated_achievements, get_paginated_habits, get_paginated_goals
import logging
import math
from typing import Optional, List, Dict, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def get_main_menu_keyboard(include_settings: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ).
    """
    logger.debug("Creating main menu keyboard")
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="menu_mark_done")
    builder.button(text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="menu_log_activity")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
    builder.button(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="menu_achievements")
    builder.button(text="üìã –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="menu_habits")
    builder.button(text="üéØ –¶–µ–ª–∏", callback_data="menu_goals")
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="menu_tips")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="menu_clear_stats")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å
    if include_settings:
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    builder.adjust(1)
    logger.debug("Main menu keyboard created successfully")
    return builder.as_markup()

def get_achievements_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.
    """
    logger.debug("Creating achievements menu keyboard")
    buttons = [
        [InlineKeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_view")],
        [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data="achievements_add")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data="achievements_delete")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_habits_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
    """
    logger.debug("Creating habits menu keyboard")
    buttons = [
        [InlineKeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_view")],
        [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="habits_add")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="habits_delete")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_goals_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏.
    """
    logger.debug("Creating goals menu keyboard")
    buttons = [
        [InlineKeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–∏", callback_data="goals_view")],
        [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="goals_add")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", callback_data="goals_delete")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –≠–¢–û–¢ –ë–õ–û–ö

def get_delete_achievements_keyboard(user_id: int, page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.debug(f"Creating delete achievements keyboard for user {user_id}, page {page}")
    achievements, total_items = get_paginated_achievements(user_id, page=page, per_page=5)
    builder = InlineKeyboardBuilder()

    for ach in achievements:
        builder.button(text=f"‚ùå {ach['name']}", callback_data=f"delete_achievement_{ach['id']}")

    total_pages = math.ceil(total_items / 5)
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_achievement_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"delete_achievement_page:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="¬´ –í –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", callback_data="menu_achievements"))
    builder.adjust(1)
    return builder.as_markup()

def get_delete_habits_keyboard(user_id: int, page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.debug(f"Creating delete habits keyboard for user {user_id}, page {page}")
    habits, total_items = get_paginated_habits(user_id, page=page, per_page=5)
    builder = InlineKeyboardBuilder()

    for habit in habits:
        builder.button(text=f"‚ùå {habit['name']}", callback_data=f"delete_habit_{habit['id']}")

    total_pages = math.ceil(total_items / 5)
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_habit_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"delete_habit_page:{page+1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="¬´ –í –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="menu_habits"))
    builder.adjust(1)
    return builder.as_markup()


def get_delete_goals_keyboard(user_id: int, page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–ª—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.debug(f"Creating delete goals keyboard for user {user_id}, page {page}")
    goals, total_items = get_paginated_goals(user_id, page=page, per_page=5)
    builder = InlineKeyboardBuilder()

    for goal in goals:
        builder.button(text=f"‚ùå {goal['name']}", callback_data=f"delete_goal_{goal['id']}")

    total_pages = math.ceil(total_items / 5)
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_goal_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"delete_goal_page:{page+1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="¬´ –í –º–µ–Ω—é —Ü–µ–ª–µ–π", callback_data="menu_goals"))
    builder.adjust(1)
    return builder.as_markup()

def get_tips_categories_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ–≤–µ—Ç–æ–≤.
    """
    logger.debug("Creating tips categories keyboard")
    categories = ["–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–§–æ–∫—É—Å", "–°–ø–æ—Ä—Ç", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ú—ã—à–ª–µ–Ω–∏–µ"]
    buttons = [[InlineKeyboardButton(text=category, callback_data=f"tip_category_{category}")] for category in categories]
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_tips_by_category_keyboard(tips: List[Dict[str, str]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    logger.debug("Creating tips by category keyboard")
    buttons = [[InlineKeyboardButton(text=tip['title'], callback_data=f"tip_{tip['id']}")] for tip in tips]
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="category")])
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_tip_content_keyboard(category: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–≤–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    logger.debug(f"Creating tip content keyboard for category: {category}")
    buttons = [
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–æ–≤–µ—Ç–∞–º", callback_data=f"tip_category_{category}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_log_activity_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ–∑–Ω–∞—è/–Ω–µ –ø–æ–ª–µ–∑–Ω–∞—è).
    """
    logger.debug("Creating log activity type keyboard")
    buttons = [
        [InlineKeyboardButton(text="üì± –ù–µ –ø–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_screen")],
        [InlineKeyboardButton(text="üí° –ü–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_productive")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_mark_done_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
    """
    try:
        logger.debug(f"Creating mark done keyboard for user_id: {user_id}")
        with get_db() as db_session:
            stmt = text("SELECT * FROM daily_stats WHERE user_id = :uid AND stat_date = :today")
            result = db_session.execute(stmt, {'uid': user_id, 'today': date.today()}).first()
            if not result:
                logger.debug(f"No daily stats found for user_id: {user_id}")
                return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]])
            stats = result._asdict()
            buttons = []
            activities = [
                ('workout', '‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'done_workout'),
                ('stretching', 'üßò –†–∞—Å—Ç—è–∂–∫–∞', 'done_stretching'),
                ('english', 'üéì –Ø–∑—ã–∫', 'done_english'),
                ('reflection', 'ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è', 'done_reflection'),
                ('coding', 'üíª –ö–æ–¥–∏–Ω–≥', 'done_coding'),
                ('planning', 'üìù –ü–ª–∞–Ω', 'done_planning'),
                ('walk', 'üö∂ –ü—Ä–æ–≥—É–ª–∫–∞', 'done_walk'),
            ]
            row = []
            for key, label, callback in activities:
                if stats.get(f"{key}_planned", 0) == 1:
                    row.append(InlineKeyboardButton(text=label, callback_data=callback))
                    if len(row) == 2:
                        buttons.append(row)
                        row = []
            if row:
                buttons.append(row)
            buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
            logger.debug("Mark done keyboard created successfully")
            return InlineKeyboardMarkup(inline_keyboard=buttons)
    except Exception as e:
        logger.error(f"Error generating mark done keyboard for user_id {user_id}: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]])

def get_confirm_clear_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    logger.debug("Creating confirm clear keyboard")
    buttons = [
        [InlineKeyboardButton(text="üî¥ –î–∞, —Å—Ç–µ—Ä–µ—Ç—å –≤—Å—ë", callback_data="confirm_clear_yes")],
        [InlineKeyboardButton(text="üü¢ –û—Ç–º–µ–Ω–∞", callback_data="confirm_clear_no")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_morning_day_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–Ω—è.
    """
    logger.debug("Creating morning day type keyboard")
    buttons = [
        [InlineKeyboardButton(text="üèñÔ∏è –û—Ç–¥—ã—Ö", callback_data="plan_day_rest")],
        [InlineKeyboardButton(text="üíº –ë—É–¥–Ω–∏", callback_data="plan_day_workday")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_morning_poll_keyboard(user_plan: dict = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞.
    """
    logger.debug("Creating morning poll keyboard")
    if user_plan is None:
        user_plan = {
            'time': None,
            'workout': 0,
            'english': 0,
            'coding': 0,
            'planning': 0,
            'stretching': 0,
            'reflection': 0,
            'walk': 0
        }
    buttons = [
        [InlineKeyboardButton(text="–≠–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="inactive")],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 4*60 else ''}4—á",
                callback_data="plan_time_4"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 5*60 else ''}5—á",
                callback_data="plan_time_5"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 6*60 else ''}6—á",
                callback_data="plan_time_6"
            )
        ],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="inactive")],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['workout'] else ''}‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                callback_data="plan_toggle_workout"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['english'] else ''}üéì –Ø–∑—ã–∫",
                callback_data="plan_toggle_english"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['coding'] else ''}üíª –ö–æ–¥–∏–Ω–≥",
                callback_data="plan_toggle_coding"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['planning'] else ''}üìù –ü–ª–∞–Ω",
                callback_data="plan_toggle_planning"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['stretching'] else ''}üßò –†–∞—Å—Ç—è–∂–∫–∞",
                callback_data="plan_toggle_stretching"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['reflection'] else ''}ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
                callback_data="plan_toggle_reflection"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['walk'] else ''}üö∂ –ü—Ä–æ–≥—É–ª–∫–∞",
                callback_data="plan_toggle_walk"
            )
        ],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="plan_done")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_stats_keyboard(webapp_url: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    logger.debug(f"Creating stats keyboard with webapp_url: {webapp_url}")
    buttons = [
        [InlineKeyboardButton(text="‚öîÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ü–∞–Ω–µ–ª—å –ö–æ–º–∞–Ω–¥–∏—Ä–∞", web_app=WebAppInfo(url=webapp_url))],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_timezone_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
    """
    logger.debug("Creating timezone keyboard")
    buttons = [
        [InlineKeyboardButton(text="Asia/Almaty (UTC+5)", callback_data="tz_set_Asia/Almaty")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

from aiogram.utils.keyboard import InlineKeyboardBuilder # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

def get_settings_keyboard(current_tz: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ —Å–º–µ–Ω–æ–π —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    logger.debug(f"Creating settings keyboard with timezone: {current_tz}")
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–¢–µ–∫—É—â–∏–π –ø–æ—è—Å: {current_tz}", callback_data="dummy_tz")
    builder.button(text="Europe/Moscow (UTC+3)", callback_data="tz_set_Europe/Moscow")
    builder.button(text="Asia/Almaty (UTC+5)", callback_data="tz_set_Asia/Almaty")
    builder.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")
    builder.adjust(1)
    return builder.as_markup()

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    logger.debug("Creating cancel keyboard")
    buttons = [
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_goal_answer_keyboard(goal_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏.
    """
    logger.debug(f"Creating goal answer keyboard for goal_id: {goal_id}")
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"goal_answer_{goal_id}_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"goal_answer_{goal_id}_no")
        ],
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_goal_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è).
    """
    logger.debug("Creating goal type keyboard")
    buttons = [
        [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è", callback_data="goal_type_daily")],
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="goal_type_weekly")],
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_goal_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏.
    """
    logger.debug("Creating goal confirm keyboard")
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="goal_confirm")],
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_help_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    logger.debug("Creating help menu keyboard")
    buttons = [
        [InlineKeyboardButton(text="üìñ –û–±—â–µ–µ", callback_data="help_general")],
        [InlineKeyboardButton(text="üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="help_activities")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª–∏", callback_data="help_goals")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="help_tips")],
        [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="help_achievements")],
        [InlineKeyboardButton(text="üìã –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="help_habits")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="help_stats")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)