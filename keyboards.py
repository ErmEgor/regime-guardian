from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import date
from sqlalchemy import text
from db import get_db
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def get_main_menu_keyboard(include_settings: bool = False):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="menu_mark_done")
    builder.button(text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="menu_log_activity")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="menu_clear_stats")
    builder.button(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="menu_achievements")
    if include_settings:
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    builder.adjust(1)
    return builder.as_markup()

def get_achievements_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_view")],
        [InlineKeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data="achievements_add")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_log_activity_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üì± –ù–µ –ø–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_screen")],
        [InlineKeyboardButton(text="üí° –ü–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_productive")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_mark_done_keyboard(user_id: int):
    try:
        with get_db() as db_session:
            stmt = text("SELECT * FROM daily_stats WHERE user_id = :uid AND stat_date = :today")
            result = db_session.execute(stmt, {'uid': user_id, 'today': date.today()}).first()
            if not result:
                return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]])
            stats = result._asdict()
            buttons = []
            activities = [
                ('workout', '‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'done_workout'),
                ('stretching', 'üßò –†–∞—Å—Ç—è–∂–∫–∞', 'done_stretching'),
                ('english', 'üéì –Ø–∑—ã–∫', 'done_english'),
                ('reflection', 'ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è', 'done_reflection'),
                ('coding', 'üíª –ö–æ–¥–∏–Ω–≥', 'done_coding'),
                ('planning', 'üìù –ü–ª–∞–Ω', 'done_planning'),
                ('walk', 'üö∂ –ü—Ä–æ–≥—É–ª–∫–∞', 'done_walk'),
            ]
            row = []
            for key, label, callback in activities:
                if stats.get(f"{key}_planned", 0) == 1:
                    row.append(InlineKeyboardButton(text=label, callback_data=callback))
                    if len(row) == 2:
                        buttons.append(row)
                        row = []
            if row:
                buttons.append(row)
            buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
            return InlineKeyboardMarkup(inline_keyboard=buttons)
    except Exception as e:
        logger.error(f"Error generating mark done keyboard for user_id {user_id}: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]])

def get_confirm_clear_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üî¥ –î–∞, —Å—Ç–µ—Ä–µ—Ç—å –≤—Å—ë", callback_data="confirm_clear_yes")],
        [InlineKeyboardButton(text="üü¢ –û—Ç–º–µ–Ω–∞", callback_data="confirm_clear_no")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_morning_day_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üèñÔ∏è –û—Ç–¥—ã—Ö", callback_data="plan_day_rest")],
        [InlineKeyboardButton(text="üíº –ë—É–¥–Ω–∏", callback_data="plan_day_workday")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_morning_poll_keyboard(user_plan: dict = None):
    if user_plan is None:
        user_plan = {
            'time': None,
            'workout': 0,
            'english': 0,
            'coding': 0,
            'planning': 0,
            'stretching': 0,
            'reflection': 0,
            'walk': 0
        }
    buttons = [
        [InlineKeyboardButton(text="–≠–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="inactive")],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 4*60 else ''}4—á",
                callback_data="plan_time_4"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 5*60 else ''}5—á",
                callback_data="plan_time_5"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['time'] == 6*60 else ''}6—á",
                callback_data="plan_time_6"
            )
        ],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="inactive")],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['workout'] else ''}‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                callback_data="plan_toggle_workout"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['english'] else ''}üéì –Ø–∑—ã–∫",
                callback_data="plan_toggle_english"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['coding'] else ''}üíª –ö–æ–¥–∏–Ω–≥",
                callback_data="plan_toggle_coding"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['planning'] else ''}üìù –ü–ª–∞–Ω",
                callback_data="plan_toggle_planning"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['stretching'] else ''}üßò –†–∞—Å—Ç—è–∂–∫–∞",
                callback_data="plan_toggle_stretching"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['reflection'] else ''}ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
                callback_data="plan_toggle_reflection"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if user_plan['walk'] else ''}üö∂ –ü—Ä–æ–≥—É–ª–∫–∞",
                callback_data="plan_toggle_walk"
            )
        ],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="plan_done")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_stats_keyboard(webapp_url: str):
    buttons = [
        [InlineKeyboardButton(text="‚öîÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ü–∞–Ω–µ–ª—å –ö–æ–º–∞–Ω–¥–∏—Ä–∞", web_app=WebAppInfo(url=webapp_url))]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_timezone_keyboard():
    buttons = [
        [InlineKeyboardButton(text="Asia/Almaty (UTC+5)", callback_data="tz_set_Asia/Almaty")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_settings_keyboard(current_tz: str):
    buttons = [
        [InlineKeyboardButton(text=f"–¢–µ–∫—É—â–∏–π –ø–æ—è—Å: {current_tz}", callback_data="inactive")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cancel_keyboard():
    buttons = [
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)