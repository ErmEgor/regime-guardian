import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from typing import Optional, List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def get_main_menu_keyboard(include_settings: bool = True) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ).
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "menu_stats"),
            ("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "menu_achievements"),
            ("üéØ –¶–µ–ª–∏", "menu_goals"),
            ("üìã –ü—Ä–∏–≤—ã—á–∫–∏", "menu_habits"),
            ("üí° –°–æ–≤–µ—Ç—ã", "menu_tips"),
            ("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "menu_mark_done"),
            ("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "menu_log_activity"),
        ]
        if include_settings:
            buttons.append(("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu_settings"))
        buttons.append(("üóë –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "menu_clear_stats"))

        for text, callback_data in buttons:
            if not text or not callback_data:
                logger.error(f"Invalid button data: text='{text}', callback_data='{callback_data}'")
                raise ValueError("Button text or callback_data is empty")
            keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
            logger.debug(f"Added button: {text} with callback_data: {callback_data}")

        logger.info("Main menu keyboard created successfully")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating main menu keyboard: {e}")
        raise

def get_settings_keyboard(timezone: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ç–µ–∫—É—â–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π.
    """
    try:
        if not timezone:
            logger.error("Timezone is empty or None")
            raise ValueError("Timezone cannot be empty")
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}", callback_data="settings_timezone"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug(f"Settings keyboard created with timezone: {timezone}")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating settings keyboard: {e}")
        raise

def get_achievements_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="achievements_view"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="achievements_add")
        )
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug("Achievements menu keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating achievements menu keyboard: {e}")
        raise

def get_goals_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="goals_view"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="goals_add")
        )
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug("Goals menu keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating goals menu keyboard: {e}")
        raise

def get_habits_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="habits_view"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="habits_add")
        )
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug("Habits menu keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating habits menu keyboard: {e}")
        raise

def get_tips_categories_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ–≤–µ—Ç–æ–≤.
    """
    try:
        categories = ["–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"]
        keyboard = InlineKeyboardMarkup(row_width=2)
        for category in categories:
            if not category:
                logger.error("Empty category name detected")
                raise ValueError("Category name cannot be empty")
            keyboard.add(InlineKeyboardButton(category, callback_data=f"tip_category_{category}"))
            logger.debug(f"Added tip category button: {category}")
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug("Tips categories keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating tips categories keyboard: {e}")
        raise

def get_tips_by_category_keyboard(tips: List[Dict[str, str]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        if not tips:
            logger.error("Tips list is empty")
            raise ValueError("Tips list cannot be empty")
        keyboard = InlineKeyboardMarkup(row_width=1)
        for tip in tips:
            title = tip.get('title')
            tip_id = tip.get('id')
            if not title or not tip_id:
                logger.error(f"Invalid tip data: title='{title}', id='{tip_id}'")
                raise ValueError("Tip title or id is missing")
            keyboard.add(InlineKeyboardButton(title, callback_data=f"tip_{tip_id}"))
            logger.debug(f"Added tip button: {title} with id: {tip_id}")
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_tips"))
        logger.debug("Tips by category keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating tips by category keyboard: {e}")
        raise

def get_tip_content_keyboard(category: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–≤–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        if not category:
            logger.error("Category is empty or None")
            raise ValueError("Category cannot be empty")
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–≤–µ—Ç–∞–º", callback_data=f"tip_category_{category}"))
        keyboard.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))
        logger.debug(f"Tip content keyboard created for category: {category}")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating tip content keyboard: {e}")
        raise

def get_goal_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="goal_type_weekly"),
            InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è", callback_data="goal_type_monthly")
        )
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Goal type keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating goal type keyboard: {e}")
        raise

def get_goal_duration_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="goal_duration_weekly"),
            InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="goal_duration_monthly")
        )
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Goal duration keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating goal duration keyboard: {e}")
        raise

def get_mark_done_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            ("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "done_workout"),
            ("üó£ –Ø–∑—ã–∫", "done_english"),
            ("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "done_coding"),
            ("üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "done_planning"),
            ("üßò –†–∞—Å—Ç—è–∂–∫–∞", "done_stretching"),
            ("ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "done_reflection"),
            ("üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", "done_walk")
        ]
        for text, callback in buttons:
            if not text or not callback:
                logger.error(f"Invalid button data: text='{text}', callback_data='{callback}'")
                raise ValueError("Button text or callback_data is empty")
            keyboard.add(InlineKeyboardButton(text=text, callback_data=callback))
            logger.debug(f"Added mark done button: {text} with callback_data: {callback}")
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug(f"Mark done keyboard created for user_id: {user_id}")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating mark done keyboard: {e}")
        raise

def get_morning_day_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–Ω—è.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å", callback_data="plan_day_work"),
            InlineKeyboardButton("–î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞", callback_data="plan_day_rest")
        )
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Morning day type keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating morning day type keyboard: {e}")
        raise

def get_morning_poll_keyboard(plan: Optional[Dict[str, Optional[int]]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞.
    """
    try:
        if not plan:
            logger.error("Plan is None or empty")
            raise ValueError("Plan cannot be None or empty")
        keyboard = InlineKeyboardMarkup(row_width=3)
        time_buttons = [
            InlineKeyboardButton("2—á", callback_data="plan_time_2"),
            InlineKeyboardButton("3—á", callback_data="plan_time_3"),
            InlineKeyboardButton("4—á", callback_data="plan_time_4"),
            InlineKeyboardButton("5—á", callback_data="plan_time_5"),
            InlineKeyboardButton("6—á", callback_data="plan_time_6")
        ]
        keyboard.row(*time_buttons)
        habit_buttons = [
            InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="plan_toggle_workout"),
            InlineKeyboardButton("üó£ –Ø–∑—ã–∫", callback_data="plan_toggle_english"),
            InlineKeyboardButton("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="plan_toggle_coding"),
            InlineKeyboardButton("üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="plan_toggle_planning"),
            InlineKeyboardButton("üßò –†–∞—Å—Ç—è–∂–∫–∞", callback_data="plan_toggle_stretching"),
            InlineKeyboardButton("ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", callback_data="plan_toggle_reflection"),
            InlineKeyboardButton("üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", callback_data="plan_toggle_walk")
        ]
        keyboard.add(*habit_buttons)
        keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="plan_done"))
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Morning poll keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating morning poll keyboard: {e}")
        raise

def get_log_activity_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ–∑–Ω–∞—è/–Ω–µ –ø–æ–ª–µ–∑–Ω–∞—è).
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üì± –ù–µ –ø–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_screen"),
            InlineKeyboardButton("üí™ –ü–æ–ª–µ–∑–Ω–∞—è", callback_data="log_type_productive")
        )
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Log activity type keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating log activity type keyboard: {e}")
        raise

def get_habit_answer_keyboard(habit_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏.
    """
    try:
        if not habit_id:
            logger.error("Habit ID is empty or None")
            raise ValueError("Habit ID cannot be empty")
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"habit_answer_{habit_id}_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"habit_answer_{habit_id}_no")
        )
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug(f"Habit answer keyboard created for habit_id: {habit_id}")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating habit answer keyboard: {e}")
        raise

def get_stats_keyboard(webapp_url: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    try:
        if not webapp_url:
            logger.error("Webapp URL is empty or None")
            raise ValueError("Webapp URL cannot be empty")
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(
                "üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                web_app=WebAppInfo(url=webapp_url)
            )
        )
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        logger.debug(f"Stats keyboard created with webapp_url: {webapp_url}")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating stats keyboard: {e}")
        raise

def get_confirm_clear_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_clear_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_clear_no")
        )
        logger.debug("Confirm clear keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating confirm clear keyboard: {e}")
        raise

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    try:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="fsm_cancel"))
        logger.debug("Cancel keyboard created")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating cancel keyboard: {e}")
        raise