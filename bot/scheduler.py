from aiogram import Bot
from datetime import datetime
import pytz # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
import bot.db as db
import bot.keyboards as kb
from apscheduler.schedulers.asyncio import AsyncIOScheduler

async def send_morning_poll_to_user(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await bot.send_message(
            user_id,
            "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∏—Ä! –ü–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –±–æ—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=kb.get_morning_poll_keyboard()
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
# –û–ë–ù–û–í–õ–ï–ù–û: –í–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def send_evening_summary_to_user(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω—é—é —Å–≤–æ–¥–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        stats = db.get_today_stats_for_user(user_id)
        if not stats: return

        summary_lines = ["üåô –í–µ—á–µ—Ä–Ω–∏–π —Ä–∞–ø–æ—Ä—Ç, –∫–æ–º–∞–Ω–¥–∏—Ä:\n"]
        
        # –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_goal_hours = stats.get('screen_time_goal', 0)
        time_actual_minutes = db.get_today_screen_time(user_id)
        time_actual_hours = round(time_actual_minutes / 60, 1)

        time_status = "‚úÖ –í —Ä–∞–º–∫–∞—Ö!" if time_actual_hours <= time_goal_hours else "‚ùå –ü–µ—Ä–µ–ª–∏–º–∏—Ç"
        summary_lines.append(f"üì± –≠–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ~{time_actual_hours}—á –∏–∑ <{time_goal_hours}—á. ({time_status})")
        
        summary_lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        def get_status(planned, done):
            if not planned: return "–Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∞—Å—å"
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if done else "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞"

        summary_lines.append(f"‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {get_status(stats['workout_planned'], stats['workout_done'])}")
        summary_lines.append(f"üéì –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {get_status(stats['english_planned'], stats['english_done'])}")
        summary_lines.append(f"üíª –ö–æ–¥–∏–Ω–≥: {get_status(stats['coding_planned'], stats['coding_done'])}")
        summary_lines.append(f"üìù –ü–ª–∞–Ω: {get_status(stats['planning_planned'], stats['planning_done'])}")
        summary_lines.append(f"üßò –†–∞—Å—Ç—è–∂–∫–∞: {get_status(stats['stretching_planned'], stats['stretching_done'])}")
        summary_lines.append(f"ü§î –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {get_status(stats['reflection_planned'], stats['reflection_done'])}")
        
        summary_lines.append("\n–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è –±–∏—Ç–≤–∞.")
        await bot.send_message(user_id, "\n".join(summary_lines))
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω—é—é —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def check_and_send_messages(bot: Bot):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    users = db.get_all_users_with_tz()
    for user in users:
        user_id = user['user_id']
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tz = pytz.timezone(user['timezone'])
            user_time = datetime.now(user_tz)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ (8:00)
            if user_time.hour == 8 and user_time.minute == 0:
                await send_morning_poll_to_user(bot, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏ (20:00)
            if user_time.hour == 20 and user_time.minute == 0:
                await send_evening_summary_to_user(bot, user_id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    scheduler = AsyncIOScheduler()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    scheduler.add_job(check_and_send_messages, 'interval', minutes=1, args=[bot])
    scheduler.start()